// Code generated by Remoto; DO NOT EDIT.

package contract

import (
	"context"
	"encoding/json"
	"io"
	"io/ioutil"
	"mime/multipart"
	"net/http"
	"strconv"

	"github.com/machinebox/remoto/remototypes"
	"github.com/oxtoacart/bpool"
	"github.com/pkg/errors"
)

// ServiceClient accesses remote Service services.
type ServiceClient struct {
	// endpoint is the HTTP endpoint of the remote server.
	endpoint string
	// httpclient is the http.Client to use to make requests.
	httpclient *http.Client
	// bufs is a buffer pool
	bufs *bpool.BufferPool
}

// NewServiceClient makes a new ServiceClient that will
// use the specified http.Client to make requests.
func NewServiceClient(endpoint string, client *http.Client) *ServiceClient {
	return &ServiceClient{
		endpoint:   endpoint,
		httpclient: client,
		bufs:       bpool.NewBufferPool(48),
	}
}

func (c *ServiceClient) Execute(ctx context.Context, request *MSExecuteRequest) (*MSResponse, error) {
	resp, err := c.ExecuteMulti(ctx, []*MSExecuteRequest{request})
	if err != nil {
		return nil, err
	}
	if len(resp) == 0 {
		return nil, errors.New("ServiceClient.Execute: no response")
	}
	return resp[0], nil
}

func (c *ServiceClient) ExecuteMulti(ctx context.Context, requests []*MSExecuteRequest) ([]*MSResponse, error) {
	b, err := json.Marshal(requests)
	if err != nil {
		return nil, errors.Wrap(err, "ServiceClient.Execute: encode request")
	}
	buf := c.bufs.Get()
	defer c.bufs.Put(buf)
	w := multipart.NewWriter(buf)
	w.WriteField("json", string(b))
	if files, ok := ctx.Value(contextKeyFiles).(map[string]file); ok {
		for fieldname, file := range files {
			f, err := w.CreateFormFile(fieldname, file.filename)
			if err != nil {
				return nil, errors.Wrap(err, "ServiceClient.Execute: create form file")
			}
			if _, err := io.Copy(f, file.r); err != nil {
				return nil, errors.Wrap(err, "ServiceClient.Execute: reading file")
			}
			select {
			case <-ctx.Done():
				return nil, ctx.Err()
			default:
			}
		}
	}
	if err := w.Close(); err != nil {
		return nil, errors.Wrap(err, "ServiceClient.Execute: write")
	}
	req, err := http.NewRequest(http.MethodPost, c.endpoint+"/remoto/Service.Execute", buf)
	if err != nil {
		return nil, errors.Wrap(err, "ServiceClient.Execute: new request")
	}
	req.Header.Set("Accept", "application/json; charset=utf-8")
	req.Header.Set("Content-Type", w.FormDataContentType())
	req = req.WithContext(ctx)
	resp, err := c.httpclient.Do(req)
	if err != nil {
		return nil, errors.Wrap(err, "ServiceClient.Execute: do")
	}
	if resp.StatusCode != http.StatusOK {
		resp.Body.Close()
		return nil, errors.Errorf("ServiceClient.Execute: remote service returned %s", resp.Status)
	}
	b, err = ioutil.ReadAll(resp.Body)
	resp.Body.Close()
	if err != nil {
		return nil, errors.Wrap(err, "ServiceClient.Execute: read response body")
	}
	var resps []*MSResponse
	if err := json.Unmarshal(b, &resps); err != nil {
		return nil, errors.Wrap(err, "ServiceClient.Execute: decode response body")
	}
	return resps, nil
}

func (c *ServiceClient) Rollback(ctx context.Context, request *MSRollbackRequest) (*MSResponse, error) {
	resp, err := c.RollbackMulti(ctx, []*MSRollbackRequest{request})
	if err != nil {
		return nil, err
	}
	if len(resp) == 0 {
		return nil, errors.New("ServiceClient.Rollback: no response")
	}
	return resp[0], nil
}

func (c *ServiceClient) RollbackMulti(ctx context.Context, requests []*MSRollbackRequest) ([]*MSResponse, error) {
	b, err := json.Marshal(requests)
	if err != nil {
		return nil, errors.Wrap(err, "ServiceClient.Rollback: encode request")
	}
	buf := c.bufs.Get()
	defer c.bufs.Put(buf)
	w := multipart.NewWriter(buf)
	w.WriteField("json", string(b))
	if files, ok := ctx.Value(contextKeyFiles).(map[string]file); ok {
		for fieldname, file := range files {
			f, err := w.CreateFormFile(fieldname, file.filename)
			if err != nil {
				return nil, errors.Wrap(err, "ServiceClient.Rollback: create form file")
			}
			if _, err := io.Copy(f, file.r); err != nil {
				return nil, errors.Wrap(err, "ServiceClient.Rollback: reading file")
			}
			select {
			case <-ctx.Done():
				return nil, ctx.Err()
			default:
			}
		}
	}
	if err := w.Close(); err != nil {
		return nil, errors.Wrap(err, "ServiceClient.Rollback: write")
	}
	req, err := http.NewRequest(http.MethodPost, c.endpoint+"/remoto/Service.Rollback", buf)
	if err != nil {
		return nil, errors.Wrap(err, "ServiceClient.Rollback: new request")
	}
	req.Header.Set("Accept", "application/json; charset=utf-8")
	req.Header.Set("Content-Type", w.FormDataContentType())
	req = req.WithContext(ctx)
	resp, err := c.httpclient.Do(req)
	if err != nil {
		return nil, errors.Wrap(err, "ServiceClient.Rollback: do")
	}
	if resp.StatusCode != http.StatusOK {
		resp.Body.Close()
		return nil, errors.Errorf("ServiceClient.Rollback: remote service returned %s", resp.Status)
	}
	b, err = ioutil.ReadAll(resp.Body)
	resp.Body.Close()
	if err != nil {
		return nil, errors.Wrap(err, "ServiceClient.Rollback: read response body")
	}
	var resps []*MSResponse
	if err := json.Unmarshal(b, &resps); err != nil {
		return nil, errors.Wrap(err, "ServiceClient.Rollback: decode response body")
	}
	return resps, nil
}

type MSExecuteRequest struct {
	ID   string `json:"id"`
	Type string `json:"type"`
}

type MSResponse struct {
	ID      string `json:"id"`
	IsError bool   `json:"isError"`
	Message string `json:"message"`
	// Error is an error message if one occurred.
	Error string `json:"error"`
}

type MSRollbackRequest struct {
	ID string `json:"id"`
}

// contextKey is a local context key type.
// see https://medium.com/@matryer/context-keys-in-go-5312346a868d
type contextKey string

func (c contextKey) String() string {
	return "remoto context key: " + string(c)
}

// contextKeyFiles is the context key for the request files.
var contextKeyFiles = contextKey("files")

// file holds info about a file in the context, including
// the io.Reader where the contents will be read from.
type file struct {
	r        io.Reader
	filename string
}

// this is here so we don't get a compiler complaints.
func init() {
	var _ = remototypes.File{}
	var _ = strconv.Itoa(0)
	var _ = ioutil.Discard
}
