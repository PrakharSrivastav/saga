// Code generated by Remoto; DO NOT EDIT.

// Package contract contains the HTTP server for contract services.
package server

import (
	"context"
	"fmt"
	"io"
	"net/http"
	"os"
	"strconv"

	"github.com/machinebox/remoto/go/remotohttp"
	"github.com/machinebox/remoto/go/remotohttp/remototypes"
	"github.com/pkg/errors"
)

type Service interface {
	Execute(context.Context, *MSExecuteRequest) (*MSResponse, error)

	Rollback(context.Context, *MSRollbackRequest) (*MSResponse, error)
}

// Run is the simplest way to run the services.
func Run(addr string,
	service Service,
) error {
	server := New(
		service,
	)
	if err := server.Describe(os.Stdout); err != nil {
		return errors.Wrap(err, "describe service")
	}
	if err := http.ListenAndServe(addr, server); err != nil {
		return err
	}
	return nil
}

// New makes a new remotohttp.Server with the specified services
// registered.
func New(
	service Service,
) *remotohttp.Server {
	server := &remotohttp.Server{
		OnErr: func(w http.ResponseWriter, r *http.Request, err error) {
			fmt.Fprintf(os.Stderr, "%s %s: %s\n", r.Method, r.URL.Path, err.Error())
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
		NotFound: http.NotFoundHandler(),
	}

	RegisterServiceServer(server, service)
	return server
}

// RegisterServiceServer registers a Service with a remotohttp.Server.
func RegisterServiceServer(server *remotohttp.Server, service Service) {
	srv := &httpServiceServer{
		service: service,
		server:  server,
	}
	server.Register("/remoto/Service.Execute", http.HandlerFunc(srv.handleExecute))
	server.Register("/remoto/Service.Rollback", http.HandlerFunc(srv.handleRollback))

}

type MSExecuteRequest struct {
	ID string `json:"id"`

	Type string `json:"type"`
}

type MSResponse struct {
	ID string `json:"id"`

	IsError bool `json:"isError"`

	Message string `json:"message"`

	// Error is an error message if one occurred.
	Error string `json:"error"`
}

type MSRollbackRequest struct {
	ID string `json:"id"`
}

// httpServiceServer is an internal type that provides an
// HTTP wrapper around Service.
type httpServiceServer struct {
	// service is the Service being exposed by this
	// server.
	service Service
	// server is the remotohttp.Server that this server is
	// registered with.
	server *remotohttp.Server
}

// handleExecute is an http.Handler wrapper for Service.Execute.
func (srv *httpServiceServer) handleExecute(w http.ResponseWriter, r *http.Request) {
	var reqs []*MSExecuteRequest
	if err := remotohttp.Decode(r, &reqs); err != nil {
		srv.server.OnErr(w, r, err)
		return
	}

	resps := make([]MSResponse, len(reqs))
	for i := range reqs {
		resp, err := srv.service.Execute(r.Context(), reqs[i])
		if err != nil {
			resps[i].Error = err.Error()
			continue
		}
		resps[i] = *resp
	}
	if err := remotohttp.Encode(w, r, http.StatusOK, resps); err != nil {
		srv.server.OnErr(w, r, err)
		return
	}

}

// handleRollback is an http.Handler wrapper for Service.Rollback.
func (srv *httpServiceServer) handleRollback(w http.ResponseWriter, r *http.Request) {
	var reqs []*MSRollbackRequest
	if err := remotohttp.Decode(r, &reqs); err != nil {
		srv.server.OnErr(w, r, err)
		return
	}

	resps := make([]MSResponse, len(reqs))
	for i := range reqs {
		resp, err := srv.service.Rollback(r.Context(), reqs[i])
		if err != nil {
			resps[i].Error = err.Error()
			continue
		}
		resps[i] = *resp
	}
	if err := remotohttp.Encode(w, r, http.StatusOK, resps); err != nil {
		srv.server.OnErr(w, r, err)
		return
	}

}

// this is here so we don't get a compiler complaints.
func init() {
	var _ = remototypes.File{}
	var _ = strconv.Itoa(0)
	var _ = io.EOF
}
